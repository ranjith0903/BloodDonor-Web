version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: blood-donor-mongodb-dev
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: blooddonor
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data_dev:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - blood-donor-network-dev
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: blood-donor-redis-dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data_dev:/data
    networks:
      - blood-donor-network-dev
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API (Development)
  backend:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: blood-donor-backend-dev
    restart: unless-stopped
    environment:
      NODE_ENV: development
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/blooddonor?authSource=admin
      JWT_SECRET: dev-jwt-secret-key
      JWT_REFRESH_SECRET: dev-refresh-secret-key
      CLOUDINARY_CLOUD_NAME: your-cloudinary-name
      CLOUDINARY_API_KEY: your-cloudinary-api-key
      CLOUDINARY_API_SECRET: your-cloudinary-api-secret
      REDIS_URL: redis://redis:6379
      PORT: 7000
    ports:
      - "7000:7000"
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - blood-donor-network-dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend React App (Development)
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile.dev
    container_name: blood-donor-frontend-dev
    restart: unless-stopped
    environment:
      VITE_API_URL: http://localhost:7000/api
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - blood-donor-network-dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB Express (Admin UI)
  mongo-express:
    image: mongo-express:latest
    container_name: blood-donor-mongo-express-dev
    restart: unless-stopped
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password123
      ME_CONFIG_MONGODB_URL: mongodb://admin:password123@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin123
    ports:
      - "8081:8081"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - blood-donor-network-dev

  # Redis Commander (Admin UI)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: blood-donor-redis-commander-dev
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8082:8081"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - blood-donor-network-dev

  # Mailhog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: blood-donor-mailhog-dev
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - blood-donor-network-dev

volumes:
  mongodb_data_dev:
    driver: local
  redis_data_dev:
    driver: local

networks:
  blood-donor-network-dev:
    driver: bridge
